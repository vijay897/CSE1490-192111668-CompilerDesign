#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PROD_LEN 20
#define MAX_RULES 20
#define MAX_NONTERMS 10

char grammar[MAX_RULES][MAX_PROD_LEN];
char nonterms[MAX_NONTERMS];
int num_rules, num_nonterms;

int is_nonterm(char c) {
    for (int i = 0; i < num_nonterms; i++) {
        if (nonterms[i] == c) {
            return 1;
        }
    }
    return 0;
}

void find_leading(char nonterm, char* leading) {
    int leading_idx = 0;
    for (int i = 0; i < num_rules; i++) {
        if (grammar[i][0] == nonterm) {
            // This rule starts with the given nonterminal symbol
            if (grammar[i][2] == '\0' || !is_nonterm(grammar[i][2])) {
                // The next symbol after the nonterminal is a terminal symbol
                leading[leading_idx++] = grammar[i][2];
            } else {
                // The next symbol after the nonterminal is a nonterminal symbol
                char sub_leading[MAX_NONTERMS];
                find_leading(grammar[i][2], sub_leading);
                for (int j = 0; j < strlen(sub_leading); j++) {
                    leading[leading_idx++] = sub_leading[j];
                }
            }
        }
    }
    leading[leading_idx] = '\0';
}

int main() {
    // Read in the grammar from stdin
    char line[MAX_PROD_LEN];
    fgets(line, MAX_PROD_LEN, stdin);
    int line_idx = 0;
    for (int i = 0; i < strlen(line); i++) {
        if (line[i] == ';') {
            grammar[num_rules++][line_idx] = '\0';
            line_idx = 0;
        } else if (line[i] >= 'A' && line[i] <= 'Z') {
            nonterms[num_nonterms++] = line[i];
            grammar[num_rules][line_idx++] = line[i];
        } else if (line[i] != ' ' && line[i] != '\n') {
            grammar[num_rules][line_idx++] = line[i];
        }
    }

    // Compute the leading set for each nonterminal symbol
    for (int i = 0; i < num_nonterms; i++) {
        char leading[MAX_NONTERMS];
        find_leading(nonterms[i], leading);
        printf("LEADING(%c) = { ", nonterms[i]);
        for (int j = 0; j < strlen(leading); j++) {
            printf("%c ", leading[j]);
        }
        printf("}\n");
    }

    return 0;
}
